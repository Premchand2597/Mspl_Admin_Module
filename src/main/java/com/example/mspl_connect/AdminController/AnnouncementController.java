package com.example.mspl_connect.AdminController;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.example.mspl_connect.AdminEntity.AnnouncementNotificationDetailsInsert_Entity;
import com.example.mspl_connect.AdminEntity.EventConvertedDTO;
import com.example.mspl_connect.AdminEntity.EventConverted_Entity;
import com.example.mspl_connect.AdminEntity.EventDTO;
import com.example.mspl_connect.AdminEntity.Event_Entity;
import com.example.mspl_connect.AdminEntity.EventsWithStatus_DTO;
import com.example.mspl_connect.AdminEntity.EventsWithStatus_Entity;
import com.example.mspl_connect.AdminService.EventConverted_Service;
import com.example.mspl_connect.AdminService.Event_Service;
import com.example.mspl_connect.Entity.DisplayEmployessEntity;
import com.example.mspl_connect.Entity.Event;
import com.example.mspl_connect.Service.EmployeeDetaisService;

import jakarta.servlet.http.HttpSession;

@Controller
public class AnnouncementController {
	
	@Autowired
	private Event_Service event_Service;
	
	@Autowired
	private EmployeeDetaisService detaisService;
	
	@Autowired
	private EventConverted_Service eventConverted_Service;
	
	@PostMapping("/saveEventsData")
	 public String insertEventsData(@ModelAttribute("eventDTO") EventDTO eventDTO, Model model, HttpSession session) throws IOException {
		 
		 //System.out.println("from "+eventDTO.getTo_time());
		 
		 	Event event_Entity = new Event();
		 	
		 	String eventPic="";
		 	
		 	eventPic = saveImage(eventDTO.getEvent_pic());

	        event_Entity.setAnnouncedDate(eventDTO.getAnnounced_date());
			event_Entity.setEventTitle(eventDTO.getEvent_title());
			event_Entity.setEventDate(eventDTO.getEvent_date());
			event_Entity.setFromTime(eventDTO.getFrom_time());
			event_Entity.setToTime(eventDTO.getTo_time());
			event_Entity.setEvent_desc(eventDTO.getEvent_desc());
			event_Entity.setEventLocation(eventDTO.getEvent_location());
			event_Entity.setEvent_pic(eventPic);
			event_Entity.setAnnouncement_converted_flag("1");
			//event_Entity.setNew_annuncement_flag("1");
		 	
			String result = event_Service.save(event_Entity);
			String announcement_id = event_Entity.getId();
			
			//System.out.println("announcement id == "+announcement_id);
		 
		 if("success".equals(result)) {
			 List<DisplayEmployessEntity> employeeWithDeptName = detaisService.getEmployeeWithDeptName();
			 for (DisplayEmployessEntity fetchedData : employeeWithDeptName) {
		            AnnouncementNotificationDetailsInsert_Entity notificationEntity = new AnnouncementNotificationDetailsInsert_Entity();
		            notificationEntity.setEvent_id(announcement_id);
		            notificationEntity.setEmp_id(fetchedData.getEmpid());
		            notificationEntity.setFlag("1");

		            event_Service.saveAnnouncementDetailsForNotifications(notificationEntity);
		        }
			 return "redirect:events";
		 }else {
			 return "error";
		 }
	 }
	
	@GetMapping("/getEventDetails")
	 @ResponseBody
	 public List<EventsWithStatus_DTO> getDetailsForCardsEvents() {
	     List<EventsWithStatus_Entity> events = event_Service.getEventDetailsForCard(); // Assuming this method returns the entity list

	     List<EventsWithStatus_DTO> eventDTOList = new ArrayList<>();
	     
	     for (EventsWithStatus_Entity event : events) {
	         EventsWithStatus_DTO eventDTO = new EventsWithStatus_DTO();
	         eventDTO.setId(event.getId()); // Set the autogenerated id
	         eventDTO.setAnnounced_date(event.getAnnounced_date());
	         eventDTO.setEvent_title(event.getEvent_title());
	         eventDTO.setEvent_date(event.getEvent_date());
	         eventDTO.setFrom_time(event.getFrom_time());
	         eventDTO.setTo_time(event.getTo_time());
	         eventDTO.setEvent_desc(event.getEvent_desc());
	         eventDTO.setEvent_location(event.getEvent_location());
	         eventDTO.setEvent_status(event.getEvent_status());
	         eventDTO.setAnnouncement_converted_flag(event.getAnnouncement_converted_flag());
	         eventDTO.setEvent_pic_base64(event.getEvent_pic());

	         /*if (event.getEvent_pic() != null) {
	             eventDTO.setEvent_pic_base64(Base64.getEncoder().encodeToString(event.getEvent_pic()));
	         }*/

	         eventDTOList.add(eventDTO);
	     }
	     
	     //System.out.println("------------------- "+eventDTOList);
	     
	     return eventDTOList;
	 }

		
		@GetMapping("/getEventDetailsById")
		@ResponseBody
		public EventDTO getDetailsForEventsUsingId(@RequestParam("id") String id) {
			Event_Entity event = event_Service.getEventsDataById(id);
	        
	        EventDTO eventDTO = new EventDTO();
	        eventDTO.setAnnounced_date(event.getAnnounced_date());
	        eventDTO.setEvent_title(event.getEvent_title());
	        eventDTO.setEvent_date(event.getEvent_date());
	        eventDTO.setFrom_time(event.getFrom_time());
	        eventDTO.setTo_time(event.getTo_time());
	        eventDTO.setEvent_desc(event.getEvent_desc());
	        eventDTO.setEvent_location(event.getEvent_location());
	        
	        eventDTO.setEvent_pic_base64(event.getEvent_pic());
	        eventDTO.setEvent_video_base64(event.getEvent_video());

	        /*if (event.getEvent_pic() != null) {
	            eventDTO.setEvent_pic_base64(Base64.getEncoder().encodeToString(event.getEvent_pic()));
	        }
	        if (event.getEvent_video() != null) {
	            eventDTO.setEvent_video_base64(Base64.getEncoder().encodeToString(event.getEvent_video()));
	        }*/

	        return eventDTO;
	    }
		
		private String saveImage(MultipartFile file) throws IOException {
	 		//System.out.println("hoooooooo");
		    if (!file.isEmpty()) {
		    	
		    	/*String contentType = file.getContentType();
		        if (contentType == null || !contentType.startsWith("image/")) {
		            throw new IOException("Invalid file type. Only image files are allowed.");
		        }*/
		    	
		        // Create the directory if it doesn't exist
		        //Path uploadDirectory = Paths.get("C:/Users/COMP/Desktop/EmpDocs");
		    	Path uploadDirectory = Paths.get("D:/Desktop/EmpDocs/");
		    	//Path uploadDirectory = Paths.get("/home/melange/Desktop/EmpDocs/");
		        if (!Files.exists(uploadDirectory)) {
		            Files.createDirectories(uploadDirectory);
		        }
		        
		        Path uploadDirectory2 = Paths.get("src/main/resources/static/assets/EmpBackupDocs/");
		        if (!Files.exists(uploadDirectory2)) {
		            Files.createDirectories(uploadDirectory2);
		        }

		        // Generate a unique file name
		        //String fileName = UUID.randomUUID() + "_" + file.getOriginalFilename();
		        String fileName = file.getOriginalFilename();

		        Path filePath = uploadDirectory.resolve(fileName);
		        Path filePath2 = uploadDirectory2.resolve(fileName);

		        // Save the file to the file system
		        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
		        Files.copy(file.getInputStream(), filePath2, StandardCopyOption.REPLACE_EXISTING);

		        // Return the relative path for web access
		        return "Desktop/EmpDocs/" + fileName;
		    }
		    return null;
		}
		
		@PostMapping("/updateAnnouncementData")
	 	public ResponseEntity<String> updateDocUploads(@RequestParam("id") String id,
	 												   @RequestParam("announcementTitle") String announcementTitle,
	 												   @RequestParam("date") String date,
	 												   @RequestParam("fromTime") String fromTime,
	 												   @RequestParam("toTime") String toTime,
	 												   @RequestParam("location") String location,
	 	                                               @RequestParam(value = "announcementPic", required = false) MultipartFile announcementPic) {

			//System.out.println(id+" "+announcementTitle+" "+date+" "+fromTime+" "+toTime+" "+location+" "+announcementPic);
			
	 		boolean isUpdated = false;
	 		String announcementPicPath="";

	 	    try {
	 	    	
	 	    	if(announcementPic != null) {
	 	    		announcementPicPath = saveImage(announcementPic);
	 	    	}
	 	        // Fetch existing document paths from the database
	 	    	Event_Entity event = event_Service.getEventsDataById(id);
	 	        // Check each file and update only if a new file is uploaded
	 	    	announcementPicPath = (announcementPic != null && !announcementPic.isEmpty()) ? announcementPicPath : event.getEvent_pic();
	 	        // Update only the changed document paths in the database
	 	        isUpdated = event_Service.updateAnnouncementDetailsDataByUsingId(id, announcementTitle, date, fromTime, toTime, location, announcementPicPath);

	 	    } catch (IOException e) {
	 	        System.out.println(e.toString());
	 	    }

	 	    if (isUpdated) {
	 	        return ResponseEntity.ok("Document uploaded successfully");
	 	    } else {
	 	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to upload documents");
	 	    }
	 	}
		
		@PostMapping("/saveEventsConvertedData")
		 public String insertEventsData(@ModelAttribute("eventDTO") EventConvertedDTO eventDTO, @RequestParam("announcement_id") String announcement_id, Model model, HttpSession session) throws IOException {
			 
			 //System.out.println("from "+eventDTO.getTo_time());
			 
			 	EventConverted_Entity event_Entity = new EventConverted_Entity();
			 	
			 	String eventConvertedPic="", eventVideo="";
			 	
			 	eventConvertedPic = saveImage(eventDTO.getEvent_converted_pic());
			 	eventVideo = saveImage(eventDTO.getEvent_video());

		        event_Entity.setEvent_title(eventDTO.getEvent_title());
		        event_Entity.setEvent_date(eventDTO.getEvent_date());
		        event_Entity.setFrom_time(eventDTO.getFrom_time());
		        event_Entity.setTo_time(eventDTO.getTo_time());
		        event_Entity.setEvent_desc(eventDTO.getEvent_desc());
		        event_Entity.setEvent_location(eventDTO.getEvent_location());
		        event_Entity.setEvent_converted_pic(eventConvertedPic);
		        event_Entity.setEvent_video(eventVideo);
		        
		        /*try {
		            if (!eventDTO.getEvent_converted_pic().isEmpty()) {
		                event_Entity.setEvent_converted_pic(eventDTO.getEvent_converted_pic().getBytes());
		            }
		            if (!eventDTO.getEvent_video().isEmpty()) {
		                event_Entity.setEvent_video(eventDTO.getEvent_video().getBytes());
		            }
		        } catch (IOException e) {
		            e.printStackTrace();
		            return "error";
		        }*/
			 	
			 String result = eventConverted_Service.save(event_Entity);
			 event_Service.updateAnnouncementConvertedToEventsFlagValue(announcement_id);
			 
			 if("success".equals(result)) {
				 return "redirect:events";
			 }else {
				 return "error";
			 }
		 }

}
