package com.example.mspl_connect.AdminController;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.mspl_connect.AdminEntity.EventDTO;
import com.example.mspl_connect.AdminEntity.Event_Entity;
import com.example.mspl_connect.AdminEntity.EventsWithStatus_DTO;
import com.example.mspl_connect.AdminEntity.EventsWithStatus_Entity;
import com.example.mspl_connect.AdminService.Event_Service;

@Controller
public class AnnouncementController {
	
	@Autowired
	private Event_Service event_Service;
	
	@GetMapping("/getEventDetails")
	 @ResponseBody
	 public List<EventsWithStatus_DTO> getDetailsForCardsEvents() {
	     List<EventsWithStatus_Entity> events = event_Service.getEventDetailsForCard(); // Assuming this method returns the entity list

	     List<EventsWithStatus_DTO> eventDTOList = new ArrayList<>();
	     
	     for (EventsWithStatus_Entity event : events) {
	         EventsWithStatus_DTO eventDTO = new EventsWithStatus_DTO();
	         eventDTO.setId(event.getId()); // Set the autogenerated id
	         eventDTO.setAnnounced_date(event.getAnnounced_date());
	         eventDTO.setEvent_title(event.getEvent_title());
	         eventDTO.setEvent_date(event.getEvent_date());
	         eventDTO.setFrom_time(event.getFrom_time());
	         eventDTO.setTo_time(event.getTo_time());
	         eventDTO.setEvent_desc(event.getEvent_desc());
	         eventDTO.setEvent_location(event.getEvent_location());
	         eventDTO.setEvent_status(event.getEvent_status());
	         eventDTO.setAnnouncement_converted_flag(event.getAnnouncement_converted_flag());
	         eventDTO.setEvent_pic_base64(event.getEvent_pic());

	         /*if (event.getEvent_pic() != null) {
	             eventDTO.setEvent_pic_base64(Base64.getEncoder().encodeToString(event.getEvent_pic()));
	         }*/

	         eventDTOList.add(eventDTO);
	     }
	     
	     //System.out.println("------------------- "+eventDTOList);
	     
	     return eventDTOList;
	 }

		
		@GetMapping("/getEventDetailsById")
		@ResponseBody
		public EventDTO getDetailsForEventsUsingId(@RequestParam("id") String id) {
			Event_Entity event = event_Service.getEventsDataById(id);
	        
	        EventDTO eventDTO = new EventDTO();
	        eventDTO.setAnnounced_date(event.getAnnounced_date());
	        eventDTO.setEvent_title(event.getEvent_title());
	        eventDTO.setEvent_date(event.getEvent_date());
	        eventDTO.setFrom_time(event.getFrom_time());
	        eventDTO.setTo_time(event.getTo_time());
	        eventDTO.setEvent_desc(event.getEvent_desc());
	        eventDTO.setEvent_location(event.getEvent_location());
	        
	        eventDTO.setEvent_pic_base64(event.getEvent_pic());
	        eventDTO.setEvent_video_base64(event.getEvent_video());

	        /*if (event.getEvent_pic() != null) {
	            eventDTO.setEvent_pic_base64(Base64.getEncoder().encodeToString(event.getEvent_pic()));
	        }
	        if (event.getEvent_video() != null) {
	            eventDTO.setEvent_video_base64(Base64.getEncoder().encodeToString(event.getEvent_video()));
	        }*/

	        return eventDTO;
	    }

}
